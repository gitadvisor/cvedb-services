const express = require('express')
const app = express()
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
const middleware = require('../../../src/middleware/middleware')
app.use(middleware.createCtxAndReqUUID)

const cveIdFixtures = require('./mockObjects.cve-id')
const cveIdController = require('../../../src/controller/cve-id.controller/cve-id.controller')
const cveIdParams = require('../../../src/controller/cve-id.controller/cve-id.middleware')
const orgController = require('../../../src/controller/org.controller/org.controller')
const orgParams = require('../../../src/controller/org.controller/org.middleware')

class OrgGetCveIdNoCveIdsWithParams {
  async isSecretariat () {
    return false
  }

  async isBulkDownload () {
    return false
  }

  async getOrgUUID () {
    return cveIdFixtures.owningOrg.UUID
  }
}

describe('Testing the GET /cve-id endpoint in CveId Controller', () => {
  context('Positive Tests', () => {
    it('No CVEs were found for the specified query parameters', (done) => {
      class CveIdGetCveIdNoResultsWithParams {
        async aggregatePaginate () {
          const res = {
            itemsList: [],
            itemCount: 0,
            itemsPerPage: 1000,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }
          return res
        }

        async countDocuments () {
          return 0
        }
      }

      app.route('/cve-id-filtered-none-found')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new CveIdGetCveIdNoResultsWithParams() },
            getOrgRepository: () => { return new OrgGetCveIdNoCveIdsWithParams() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      chai.request(app)
        .get('/cve-id-filtered-none-found?state=published&cve_id_year=2010')
        .set(cveIdFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(0)
          done()
        })
    })

    it('The "state" query parameter is provided', (done) => {
      class CveIdGetCveIdStateProvided {
        constructor () {
          this.testRes1 = JSON.parse(JSON.stringify(cveIdFixtures.cvePublished))
          this.testRes1.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.owningOrgUser.username))
        }

        async aggregatePaginate () {
          const res = {
            itemsList: [this.testRes1],
            itemCount: 1,
            itemsPerPage: 1000,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }
          return res
        }

        async countDocuments () {
          return 1
        }
      }

      app.route('/cve-id-filtered-state-provided')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new CveIdGetCveIdStateProvided() },
            getOrgRepository: () => { return new OrgGetCveIdNoCveIdsWithParams() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      chai.request(app)
        .get('/cve-id-filtered-state-provided?state=PUBLISHED')
        .set(cveIdFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(1)
          expect(res.body.cve_ids[0]).to.have.property('cve_id').and.to.equal(cveIdFixtures.cveId)
          expect(res.body.cve_ids[0]).to.have.property('state').and.to.equal('PUBLISHED')
          expect(res.body.cve_ids[0]).to.have.property('owning_cna').and.to.equal(cveIdFixtures.owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.cna').and.to.equal(cveIdFixtures.owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.user').and.to.equal(cveIdFixtures.owningOrgUser.username)
          done()
        })
    })

    it('The "cve_id_year" query parameter is provided', (done) => {
      class CveIdGetCveIdYearProvided {
        constructor () {
          this.testRes1 = JSON.parse(JSON.stringify(cveIdFixtures.cvePublished))
          this.testRes1.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.owningOrgUser.username))
        }

        async aggregatePaginate () {
          const res = {
            itemsList: [this.testRes1],
            itemCount: 1,
            itemsPerPage: 1000,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }
          return res
        }

        async countDocuments () {
          return 1
        }
      }

      app.route('/cve-id-filtered-cve-id-year-provided')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new CveIdGetCveIdYearProvided() },
            getOrgRepository: () => { return new OrgGetCveIdNoCveIdsWithParams() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      chai.request(app)
        .get(`/cve-id-filtered-cve-id-year-provided?cve_id_year=${cveIdFixtures.cveIdYear}`)
        .set(cveIdFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(1)
          expect(res.body.cve_ids[0]).to.have.property('cve_id').and.to.equal(cveIdFixtures.cveId)
          expect(res.body.cve_ids[0]).to.have.property('cve_year').and.to.equal(cveIdFixtures.cveIdYear)
          expect(res.body.cve_ids[0]).to.have.property('state').and.to.equal('PUBLISHED')
          expect(res.body.cve_ids[0]).to.have.property('owning_cna').and.to.equal(cveIdFixtures.owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.cna').and.to.equal(cveIdFixtures.owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.user').and.to.equal(cveIdFixtures.owningOrgUser.username)
          done()
        })
    })

    it('The requester is not the secretariat and no query parameters are provided', (done) => {
      class CveIdGetCveIdNotSecretariatNoQuery {
        constructor () {
          this.testRes1 = JSON.parse(JSON.stringify(cveIdFixtures.cvePublished))
          this.testRes1.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.owningOrgUser.username))
          this.testRes2 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy1))
          this.testRes2.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes2.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes2.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
        }

        async aggregatePaginate () {
          const res = {
            itemsList: [this.testRes1, this.testRes2],
            itemCount: 2,
            itemsPerPage: 1000,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }
          return res
        }

        async countDocuments () {
          return 2
        }
      }

      app.route('/cve-id-filtered-not-secretariat-no-query')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new CveIdGetCveIdNotSecretariatNoQuery() },
            getOrgRepository: () => { return new OrgGetCveIdNoCveIdsWithParams() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      chai.request(app)
        .get('/cve-id-filtered-not-secretariat-no-query')
        .set(cveIdFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(2)
          expect(res.body.cve_ids[0]).to.nested.include({ cve_id: cveIdFixtures.cveId }).and.to.nested.include({ cve_year: cveIdFixtures.cveIdYear })
          expect(res.body.cve_ids[0]).to.nested.include({ state: cveIdFixtures.cvePublished.state }).and.to.nested.include({ owning_cna: cveIdFixtures.owningOrg.short_name })
          expect(res.body.cve_ids[0]).to.nested.include({ 'requested_by.cna': cveIdFixtures.owningOrg.short_name }).and.to.nested.include({ 'requested_by.user': cveIdFixtures.owningOrgUser.username })
          expect(res.body.cve_ids[1]).to.nested.include({ cve_id: cveIdFixtures.cveDummy1.cve_id }).and.to.nested.include({ cve_year: cveIdFixtures.cveDummy1.cve_year })
          expect(res.body.cve_ids[1]).to.nested.include({ state: cveIdFixtures.cveDummy1.state }).and.to.nested.include({ owning_cna: cveIdFixtures.owningOrg.short_name })
          expect(res.body.cve_ids[1]).to.nested.include({ 'requested_by.cna': cveIdFixtures.secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': cveIdFixtures.secretariatUser.username })
          done()
        })
    })

    it('Updating the org of the user who requested the cve id', (done) => {
      class OrgUserCveIdUpdated {
        async getOrgUUID (shortname) {
          if (shortname === cveIdFixtures.owningOrg.short_name) {
            return cveIdFixtures.owningOrg.UUID
          } else if (shortname === cveIdFixtures.org.short_name) {
            return cveIdFixtures.org.UUID
          }
          return null
        }
      }

      class UserOrgCveIdUpdated {
        async findOneByUserNameAndOrgUUID () {
          return cveIdFixtures.owningOrgUser
        }

        async find () {
          return []
        }

        async updateByUserNameAndOrgUUID () {
          cveIdFixtures.owningOrgUser.org_UUID = cveIdFixtures.org.UUID
          return { n: 1, nModified: 1, ok: 1 }
        }

        async getUserUUID () {
          return null
        }
      }

      class OrgGetUserCveIdUpdated {
        constructor () {
          cveIdFixtures.owningOrgUser.org_UUID = cveIdFixtures.org.UUID
        }

        async isSecretariat () {
          return true
        }

        async isBulkDownload () {
          return false
        }

        async getOrgUUID () {
          return cveIdFixtures.org.UUID
        }
      }

      class UserGetUserCveIdUpdated {
        async aggregate () {
          return [cveIdFixtures.owningOrgUser]
        }
      }

      app.route('/cve-id-filtered-update-user-org-request-cve-id-1/:shortname/:username')
        .put((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new OrgUserCveIdUpdated() },
            getUserRepository: () => { return new UserOrgCveIdUpdated() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

      app.route('/cve-id-filtered-update-user-org-request-cve-id-2/:shortname/:username')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new OrgGetUserCveIdUpdated() },
            getUserRepository: () => { return new UserGetUserCveIdUpdated() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.USER_SINGLE)

      chai.request(app)
        .put(`/cve-id-filtered-update-user-org-request-cve-id-1/${cveIdFixtures.owningOrg.short_name}/${cveIdFixtures.owningOrgUser.username}?org_short_name=${cveIdFixtures.org.short_name}`)
        .set(cveIdFixtures.owningOrgHeader)
        .end((err) => {
          if (err) {
            done(err)
          }

          chai.request(app)
            .get(`/cve-id-filtered-update-user-org-request-cve-id-2/${cveIdFixtures.org.short_name}/${cveIdFixtures.owningOrgUser.username}`)
            .set(cveIdFixtures.secretariatHeader)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('username').and.to.equal(cveIdFixtures.owningOrgUser.username)
              expect(res.body).to.have.property('org_UUID').and.to.equal(cveIdFixtures.org.UUID)
              done()
            })
        })
    })

    it('The requested_by field did not change after updating the org of the user who requested the cve id', (done) => {
      class CveIdGetCveIdRequestedNotChanged {
        constructor () {
          this.testRes1 = JSON.parse(JSON.stringify(cveIdFixtures.cvePublished))
          this.testRes1.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.owningOrgUser.username))
          this.testRes2 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy1))
          this.testRes2.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes2.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes2.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
        }

        async aggregatePaginate () {
          const res = {
            itemsList: [this.testRes1, this.testRes2],
            itemCount: 2,
            itemsPerPage: 1000,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }
          return res
        }

        async countDocuments () {
          return 2
        }
      }

      class OrgGetCveIdRequestedNotChanged {
        async getOrgUUID () {
          return cveIdFixtures.owningOrg.UUID
        }

        async isSecretariat () {
          return false
        }

        async isBulkDownload () {
          return false
        }
      }

      app.route('/cve-id-filtered-requested-field-not-changed')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new CveIdGetCveIdRequestedNotChanged() },
            getOrgRepository: () => { return new OrgGetCveIdRequestedNotChanged() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      chai.request(app)
        .get('/cve-id-filtered-requested-field-not-changed')
        .set(cveIdFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(2)
          expect(res.body.cve_ids[0]).to.nested.include({ cve_id: cveIdFixtures.cveId }).and.to.nested.include({ cve_year: cveIdFixtures.cveIdYear })
          expect(res.body.cve_ids[0]).to.nested.include({ state: cveIdFixtures.cvePublished.state }).and.to.nested.include({ owning_cna: cveIdFixtures.owningOrg.short_name })
          expect(res.body.cve_ids[0]).to.nested.include({ 'requested_by.cna': cveIdFixtures.owningOrg.short_name }).and.to.nested.include({ 'requested_by.user': cveIdFixtures.owningOrgUser.username })
          expect(res.body.cve_ids[1]).to.nested.include({ cve_id: cveIdFixtures.cveDummy1.cve_id }).and.to.nested.include({ cve_year: cveIdFixtures.cveDummy1.cve_year })
          expect(res.body.cve_ids[1]).to.nested.include({ state: cveIdFixtures.cveDummy1.state }).and.to.nested.include({ owning_cna: cveIdFixtures.owningOrg.short_name })
          expect(res.body.cve_ids[1]).to.nested.include({ 'requested_by.cna': cveIdFixtures.secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': cveIdFixtures.secretariatUser.username })
          done()
        })
    })

    it('The requester is the secretariat and no query parameters are provided', (done) => {
      class CveIdGetCveIdSecretariatNoQuery {
        constructor () {
          this.testRes1 = JSON.parse(JSON.stringify(cveIdFixtures.cvePublished))
          this.testRes1.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.owningOrgUser.username))
          this.testRes2 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy1))
          this.testRes2.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes2.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes2.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
          this.testRes3 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy2))
          this.testRes3.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes3.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes3.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
          this.testRes4 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy3))
          this.testRes4.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes4.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes4.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
          this.testRes5 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy4))
          this.testRes5.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.org.short_name))
          this.testRes5.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes5.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
        }

        async aggregatePaginate () {
          const res = {
            itemsList: [this.testRes1, this.testRes2, this.testRes3, this.testRes4, this.testRes5],
            itemCount: 5,
            itemsPerPage: 1000,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }
          return res
        }

        async countDocuments () {
          return 5
        }
      }

      class OrgGetCveIdRequestorSecretariatNoQuery {
        async getOrgUUID () {
          return cveIdFixtures.secretariatOrg.UUID
        }

        async findOneByUUID () {
          return cveIdFixtures.secretariatOrg
        }

        async isSecretariat () {
          return true
        }

        async isBulkDownload () {
          return false
        }
      }

      app.route('/cve-id-filtered-secretariat-no-query')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new CveIdGetCveIdSecretariatNoQuery() },
            getOrgRepository: () => { return new OrgGetCveIdRequestorSecretariatNoQuery() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      chai.request(app)
        .get('/cve-id-filtered-secretariat-no-query')
        .set(cveIdFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(5)
          expect(res.body.cve_ids[0]).to.nested.include({ cve_id: cveIdFixtures.cvePublished.cve_id }).and.to.nested.include({ cve_year: cveIdFixtures.cveIdYear })
          expect(res.body.cve_ids[0]).to.nested.include({ state: cveIdFixtures.cvePublished.state }).and.to.nested.include({ owning_cna: cveIdFixtures.owningOrg.short_name })
          expect(res.body.cve_ids[0]).to.nested.include({ 'requested_by.cna': cveIdFixtures.owningOrg.short_name }).and.to.nested.include({ 'requested_by.user': cveIdFixtures.owningOrgUser.username })
          expect(res.body.cve_ids[1]).to.nested.include({ cve_id: cveIdFixtures.cveDummy1.cve_id }).and.to.nested.include({ cve_year: cveIdFixtures.cveDummy1.cve_year })
          expect(res.body.cve_ids[1]).to.nested.include({ state: cveIdFixtures.cveDummy1.state }).and.to.nested.include({ owning_cna: cveIdFixtures.owningOrg.short_name })
          expect(res.body.cve_ids[1]).to.nested.include({ 'requested_by.cna': cveIdFixtures.secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': cveIdFixtures.secretariatUser.username })
          expect(res.body.cve_ids[2]).to.nested.include({ cve_id: cveIdFixtures.cveDummy2.cve_id }).and.to.nested.include({ cve_year: cveIdFixtures.cveDummy2.cve_year })
          expect(res.body.cve_ids[2]).to.nested.include({ state: cveIdFixtures.cveDummy2.state }).and.to.nested.include({ owning_cna: cveIdFixtures.secretariatOrg.short_name })
          expect(res.body.cve_ids[2]).to.nested.include({ 'requested_by.cna': cveIdFixtures.secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': cveIdFixtures.secretariatUser.username })
          expect(res.body.cve_ids[3]).to.nested.include({ cve_id: cveIdFixtures.cveDummy3.cve_id }).and.to.nested.include({ cve_year: cveIdFixtures.cveDummy3.cve_year })
          expect(res.body.cve_ids[3]).to.nested.include({ state: cveIdFixtures.cveDummy3.state }).and.to.nested.include({ owning_cna: cveIdFixtures.secretariatOrg.short_name })
          expect(res.body.cve_ids[3]).to.nested.include({ 'requested_by.cna': cveIdFixtures.secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': cveIdFixtures.secretariatUser.username })
          expect(res.body.cve_ids[4]).to.nested.include({ cve_id: cveIdFixtures.cveDummy4.cve_id }).and.to.nested.include({ cve_year: cveIdFixtures.cveDummy4.cve_year })
          expect(res.body.cve_ids[4]).to.nested.include({ state: cveIdFixtures.cveDummy4.state }).and.to.nested.include({ owning_cna: cveIdFixtures.org.short_name })
          expect(res.body.cve_ids[4]).to.nested.include({ 'requested_by.cna': cveIdFixtures.secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': cveIdFixtures.secretariatUser.username })
          done()
        })
    })

    it('The secretariat gets a list of non-paginated cve ids', (done) => {
      const itemsPerPage = 3

      class MyOrgRepo {
        async getOrgUUID () {
          return cveIdFixtures.secretariatOrg.UUID
        }

        async isSecretariat () {
          return true
        }

        async isBulkDownload () {
          return false
        }
      }

      class MyCveIdRepo {
        constructor () {
          this.testRes1 = JSON.parse(JSON.stringify(cveIdFixtures.cvePublished))
          this.testRes1.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.owningOrgUser.username))
          this.testRes2 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy1))
          this.testRes2.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes2.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes2.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
        }

        async aggregatePaginate () {
          const res = {
            itemsList: [this.testRes1, this.testRes2],
            itemCount: 2,
            itemsPerPage: itemsPerPage,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }

          return res
        }
      }

      app.route('/cve-id-filtered-non-paginated')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new MyCveIdRepo() },
            getOrgRepository: () => { return new MyOrgRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      const testSecretariatHeader = Object.assign({}, cveIdFixtures.secretariatHeader)
      chai.request(app)
        .get('/cve-id-filtered-non-paginated')
        .set(testSecretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(2)
          expect(res.body).to.not.have.property('totalCount')
          expect(res.body).to.not.have.property('itemsPerPage')
          expect(res.body).to.not.have.property('pageCount')
          expect(res.body).to.not.have.property('currentPage')
          expect(res.body).to.not.have.property('prevPage')
          expect(res.body).to.not.have.property('nextPage')
          done()
        })
    })

    it('The secretariat gets a list of paginated cve ids with "page" query param undefined', (done) => {
      const itemsPerPage = 3

      class MyOrgRepo {
        async getOrgUUID () {
          return cveIdFixtures.secretariatOrg.UUID
        }

        async isSecretariat () {
          return true
        }

        async isBulkDownload () {
          return false
        }
      }

      class MyCveIdRepo {
        constructor () {
          this.testRes1 = JSON.parse(JSON.stringify(cveIdFixtures.cvePublished))
          this.testRes1.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.owningOrgUser.username))
          this.testRes2 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy1))
          this.testRes2.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes2.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes2.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
          this.testRes3 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy2))
          this.testRes3.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes3.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes3.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
          this.testRes4 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy3))
          this.testRes4.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes4.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes4.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
          this.testRes5 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy4))
          this.testRes5.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.org.short_name))
          this.testRes5.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes5.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
        }

        async aggregatePaginate () {
          const res = {
            itemsList: [this.testRes1, this.testRes2, this.testRes3],
            itemCount: 5,
            itemsPerPage: itemsPerPage,
            currentPage: 1,
            pageCount: 2,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: true,
            prevPage: null,
            nextPage: 2
          }
          return res
        }
      }

      app.route('/cve-id-filtered-paginated')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new MyCveIdRepo() },
            getOrgRepository: () => { return new MyOrgRepo() }
          }
          req.ctx.repositories = factory
          // temporary fix for #920: force pagnation
          req.TEST_PAGINATOR_LIMIT = itemsPerPage
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      const testSecretariatHeader = Object.assign({}, cveIdFixtures.secretariatHeader)
      chai.request(app)
        .get('/cve-id-filtered-paginated')
        .set(testSecretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(3)
          expect(res.body).to.have.property('totalCount').and.to.equal(5)
          expect(res.body).to.have.property('itemsPerPage').and.to.equal(itemsPerPage)
          expect(res.body).to.have.property('pageCount').and.to.equal(2)
          expect(res.body).to.have.property('currentPage').and.to.equal(1)
          expect(res.body).to.have.property('prevPage').and.to.equal(null)
          expect(res.body).to.have.property('nextPage').and.to.equal(2)
          done()
        })
    })

    it('The secretariat gets a list of paginated cve ids with "page" query param defined', (done) => {
      const itemsPerPage = 3

      class MyOrgRepo {
        async getOrgUUID () {
          return cveIdFixtures.secretariatOrg.UUID
        }

        async isSecretariat () {
          return true
        }

        async isBulkDownload () {
          return false
        }
      }

      class MyCveIdRepo {
        constructor () {
          this.testRes1 = JSON.parse(JSON.stringify(cveIdFixtures.cvePublished))
          this.testRes1.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes1.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.owningOrgUser.username))
          this.testRes2 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy1))
          this.testRes2.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.owningOrg.short_name))
          this.testRes2.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes2.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
          this.testRes3 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy2))
          this.testRes3.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes3.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes3.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
          this.testRes4 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy3))
          this.testRes4.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes4.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes4.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
          this.testRes5 = JSON.parse(JSON.stringify(cveIdFixtures.cveDummy4))
          this.testRes5.owning_cna = JSON.parse(JSON.stringify(cveIdFixtures.org.short_name))
          this.testRes5.requested_by.cna = JSON.parse(JSON.stringify(cveIdFixtures.secretariatOrg.short_name))
          this.testRes5.requested_by.user = JSON.parse(JSON.stringify(cveIdFixtures.secretariatUser.username))
        }

        async aggregatePaginate () {
          const res = {
            itemsList: [this.testRes4, this.testRes3],
            itemCount: 5,
            itemsPerPage: itemsPerPage,
            currentPage: 2,
            pageCount: 2,
            pagingCounter: 1,
            hasPrevPage: true,
            hasNextPage: false,
            prevPage: 1,
            nextPage: null
          }
          return res
        }
      }

      app.route('/cve-id-filtered-paginated-2')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new MyCveIdRepo() },
            getOrgRepository: () => { return new MyOrgRepo() }
          }
          req.ctx.repositories = factory
          // temporary fix for #920: force pagnation
          req.TEST_PAGINATOR_LIMIT = itemsPerPage
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      const testSecretariatHeader = Object.assign({}, cveIdFixtures.secretariatHeader)
      chai.request(app)
        .get('/cve-id-filtered-paginated-2?page=2')
        .set(testSecretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(2)
          expect(res.body).to.have.property('totalCount').and.to.equal(5)
          expect(res.body).to.have.property('itemsPerPage').and.to.equal(itemsPerPage)
          expect(res.body).to.have.property('pageCount').and.to.equal(2)
          expect(res.body).to.have.property('currentPage').and.to.equal(2)
          expect(res.body).to.have.property('prevPage').and.to.equal(1)
          expect(res.body).to.have.property('nextPage').and.to.equal(null)
          done()
        })
    })

    it('The secretariat gets an empty list of cve ids because there are no cve ids in the database', (done) => {
      const itemsPerPage = 3

      class MyOrgRepo {
        async getOrgUUID () {
          return cveIdFixtures.secretariatOrg.UUID
        }

        async isSecretariat () {
          return true
        }

        async isBulkDownload () {
          return false
        }
      }

      class MyCveIdRepo {
        async aggregatePaginate () {
          const res = {
            itemsList: [],
            itemCount: 0,
            itemsPerPage: itemsPerPage,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }
          return res
        }
      }

      app.route('/cve-id-filtered-empty')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new MyCveIdRepo() },
            getOrgRepository: () => { return new MyOrgRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      const testSecretariatHeader = Object.assign({}, cveIdFixtures.secretariatHeader)
      chai.request(app)
        .get('/cve-id-filtered-empty')
        .set(testSecretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(0)
          expect(res.body).to.not.have.property('totalCount')
          expect(res.body).to.not.have.property('itemsPerPage')
          expect(res.body).to.not.have.property('pageCount')
          expect(res.body).to.not.have.property('currentPage')
          expect(res.body).to.not.have.property('prevPage')
          expect(res.body).to.not.have.property('nextPage')
          done()
        })
    })
  })
})
